#include <algorithm> 
#include <array> 
#include <bitset> 
#include <fstream> 
#include <functional> 
#include <iostream> 
#include <list> 
#include <map> 
#include <memory> 
#include <numeric> 
#include <random> 
#include <set> 
#include <sstream> 
#include <string> 
#include <unordered_map> 
#include <unordered_set> 
#include <vector> 
#include <queue> 

#include <cctype> 

using i64 = long long;

enum class Result
{
	Equals,
	NotEquals,
	Conflict
};

Result compare(const std::string& lhs, const std::string& rhs)
{
	auto l = lhs.cbegin();
	auto r = rhs.cbegin();

	bool eqPositions = false;
	bool neqPositions = false;

	for (l; l != lhs.cend(); ++l, ++r)
	{
		auto f = *l, s = *r;

		if (f == '#' && s == '.')
		{
			neqPositions = true;
			
			if (eqPositions)
				return Result::Conflict;
		}
		else if (f == '#' && s == '#')
		{
			eqPositions = true;

			if (neqPositions)	
				return Result::Conflict;
		}
		else if (f == '.' && s == '#')
		{
			neqPositions = true;

			if (eqPositions)
				return Result::Conflict;
		}
	}

	return (eqPositions 
		? Result::Equals 
		: Result::NotEquals
	);
}

int main()
{
	std::ios_base::sync_with_stdio(false);

#ifdef HOME
	std::ifstream cin("input.txt");
	using std::cout;
#else
	using std::cin;
	using std::cout;
#endif // HOME

	size_t n, m;

	cin >> n >> m;

	std::vector<std::string> rows;
	rows.reserve(n);

	std::string input;

	for (size_t i = 0; i < n; ++i)
	{
		cin >> input;
		rows.push_back(input);
	}

	auto used = std::vector<bool>(n, false);

	bool ok = true;

	for (size_t i = 0; i < n; i++)
	{
		if (!used[i])
		{
			used[i] = true;

			for (size_t j = i + 1; j < n; j++)
			{
				if (!used[j])
				{
					switch (compare(rows[i], rows[j]))
					{
					case Result::Conflict:
						cout << "No";
						return 0;
						break;

					case Result::Equals:
						used[j] = true;
						break;

					case Result::NotEquals:
						break;

					default: break;
					}
				}
			}
		}
	}

	cout << "Yes";

	return 0;
}